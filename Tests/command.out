Token Stream
============

Line 1, Col 1: [LEFT_BRACE] {
Line 1, Col 2: [STRING_LITERAL] command
Line 1, Col 9: [COLON] :
Line 1, Col 10: [STRING_LITERAL] 1
Line 1, Col 11: [COMMA] ,
Line 1, Col 12: [STRING_LITERAL] 2
Line 1, Col 13: [COMMA] ,
Line 1, Col 14: [STRING_LITERAL] 3
Line 1, Col 15: [RIGHT_BRACE] }
Line 1, Col 16: [NEWLINE] 
Line 2, Col 1: [NEWLINE] 
Line 3, Col 1: [LEFT_BRACE] {
Line 3, Col 2: [RIGHT_BRACE] }
Line 3, Col 3: [NEWLINE] 
Line 4, Col 1: [NEWLINE] 
Line 5, Col 1: [LEFT_BRACE] {
Line 5, Col 2: [COLON] :
Line 5, Col 3: [RIGHT_BRACE] }
Line 5, Col 4: [NEWLINE] 
Line 6, Col 1: [NEWLINE] 
Line 7, Col 1: [LEFT_BRACE] {
Line 7, Col 2: [COLON] :
Line 7, Col 3: [COMMA] ,
Line 7, Col 4: [RIGHT_BRACE] }
Line 7, Col 5: [NEWLINE] 
Line 8, Col 1: [NEWLINE] 
Line 9, Col 1: [LEFT_BRACE] {
Line 10, Col 1: [RIGHT_BRACE] }
Line 10, Col 2: [NEWLINE] 
Line 11, Col 1: [NEWLINE] 
Line 12, Col 1: [LEFT_BRACE] {
Line 12, Col 2: [STRING_LITERAL] test
Line 12, Col 6: [RIGHT_BRACE] }
Line 12, Col 7: [NEWLINE] 
Line 13, Col 1: [NEWLINE] 
Line 14, Col 1: [LEFT_BRACE] {
Line 14, Col 2: [STRING_LITERAL] te    st
Line 15, Col 7: [RIGHT_BRACE] }
Line 15, Col 8: [NEWLINE] 
Line 16, Col 1: [NEWLINE] 
Line 17, Col 1: [NEWLINE] 
Line 18, Col 1: [LEFT_BRACE] {
Line 18, Col 2: [STRING_LITERAL] test
Line 18, Col 6: [COLON] :
Line 18, Col 7: [STRING_LITERAL] a
Line 18, Col 8: [COMMA] ,
Line 18, Col 9: [STRING_LITERAL] b
Line 18, Col 10: [COMMA] ,
Line 18, Col 11: [STRING_LITERAL] c
Line 18, Col 12: [COMMA] ,
Line 18, Col 13: [STRING_LITERAL] "xxx"
Line 18, Col 18: [RIGHT_BRACE] }
Line 18, Col 19: [NEWLINE] 
Line 19, Col 1: [LEFT_BRACE] {
Line 19, Col 2: [STRING_LITERAL] test
Line 19, Col 6: [COLON] :
Line 19, Col 7: [STRING_LITERAL] a=m
Line 19, Col 10: [COMMA] ,
Line 19, Col 11: [STRING_LITERAL] b
Line 19, Col 12: [COMMA] ,
Line 19, Col 13: [STRING_LITERAL] c
Line 19, Col 14: [COMMA] ,
Line 19, Col 15: [STRING_LITERAL] "xxx"
Line 19, Col 20: [RIGHT_BRACE] }
Line 19, Col 21: [NEWLINE] 
Line 20, Col 1: [NEWLINE] 
Line 21, Col 1: [LEFT_BRACE] {
Line 21, Col 2: [STRING_LITERAL] changeImage
Line 21, Col 13: [COLON] :
Line 21, Col 14: [STRING_LITERAL] bg
Line 21, Col 16: [COMMA] ,
Line 21, Col 17: [STRING_LITERAL] bg/1.png
Line 21, Col 25: [RIGHT_BRACE] }
Line 21, Col 26: [NEWLINE] 

AST (Parsed)
============

Error at Line 3, Col 2: Expected a STRING_LITERAL.
Error at Line 5, Col 2: Expected a STRING_LITERAL.
Error at Line 7, Col 2: Expected a STRING_LITERAL.
Error at Line 10, Col 1: Expected a STRING_LITERAL.
SCRIPT
  SECTION: script_name="<UNNAMED>", display_name="<UNNAMED SECTION>"
    COMMAND_EXECUTION: name="command", args=[1, 2, 3]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="test", args=[]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="te    st", args=[]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="test", args=[a, b, c, "xxx"]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="test", args=[a=m, b, c, "xxx"]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="changeImage", args=[bg, bg/1.png]
    SYSTEM_WAIT_INPUT

AST (Checked)
=============

Warning at Line 1, Col 2: Undefined command: "command". No command will be generated.
Warning at Line 12, Col 2: Undefined command: "test". No command will be generated.
Warning at Line 14, Col 2: Undefined command: "te    st". No command will be generated.
Warning at Line 18, Col 2: Undefined command: "test". No command will be generated.
Warning at Line 19, Col 2: Undefined command: "test". No command will be generated.
SCRIPT
  SECTION: script_name="<UNNAMED>", display_name="<UNNAMED SECTION>"
    COMMAND_EXECUTION: name="command", args=[1, 2, 3]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="test", args=[]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="te    st", args=[]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="test", args=[a, b, c, "xxx"]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="test", args=[a=m, b, c, "xxx"]
    SYSTEM_WAIT_INPUT
    COMMAND_EXECUTION: name="changeImage", args=[bg, bg/1.png]
      IMAGE_CHANGE: layer="bg", asset="bg/1.png"
    SYSTEM_WAIT_INPUT

Symbol Tables: <UNNAMED>
========================

<UNNAMED>: Script
bg: ImageLayer

String Literals: <UNNAMED>
========================


Target Code: <UNNAMED>
========================

local scene = game:currentScene();
local narrator = scene:loadCharacter("narrator");
local r1 = scene:loadImageLayer("bg");
wait();
wait();
wait();
wait();
wait();
r1:changeImage("bg/1.png");
wait();
